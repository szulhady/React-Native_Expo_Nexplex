{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nexport var convertToPostMessageString = function convertToPostMessageString(obj) {\n  return JSON.stringify(obj, function (key, val) {\n    if (typeof val === \"function\") {\n      return new Function(\"return \" + val.toString());\n    }\n\n    return val;\n  });\n};\nexport var toString = function toString(obj) {\n  if (obj === undefined) return JSON.stringify({});\n  return JSON.stringify(obj, function (key, val) {\n    if (typeof val === \"function\") {\n      return val.toString();\n    }\n\n    return val;\n  });\n};\nexport var getJavascriptSource = function getJavascriptSource(props) {\n  var OS = Platform.OS;\n  var renderer = \"canvas\";\n  return \"\\n             var chart = echarts.init(document.getElementById('main'), undefined, {renderer: '\" + renderer + \"'});\\n            chart.setOption(parse(decodeURI(\\\"\" + encodeURI(toString(props.option)) + \"\\\")));\\n             setBackgroundColor(\\\"\" + props.backgroundColor + \"\\\");\\n\\n             function setBackgroundColor(color) {\\n                document.getElementById('main').style.backgroundColor = color;\\n              }\\n      \\n              function sendData(data) {\\n                  window.ReactNativeWebView.postMessage(JSON.stringify({\\\"types\\\":\\\"DATA\\\",\\\"payload\\\": data}));\\n              }\\n      \\n              function sendCallbackData(uuid, data) {\\n                  window.ReactNativeWebView.postMessage(JSON.stringify({\\\"types\\\":\\\"CALLBACK\\\", \\\"uuid\\\": uuid, \\\"payload\\\": data}));\\n              }\\n      \\n              function getOS() {\\n                  return \" + OS + \";\\n              }\\n      \\n              function parse (data) {\\n                  return JSON.parse(data, function (key, value) {\\n      \\n                      if (value\\n                          && typeof value === \\\"string\\\"\\n                          && value.substr(0,8) === \\\"function\\\") {\\n\\n                          var startBody = value.indexOf('{') + 1;\\n                          var endBody = value.lastIndexOf('}');\\n                          var startArgs = value.indexOf('(') + 1;\\n                          var endArgs = value.indexOf(')');\\n      \\n                          return new Function(value.substring(startArgs, endArgs)\\n                                            , value.substring(startBody, endBody));\\n                      }\\n                      return value;\\n                  });\\n              }\\n      \\n              function toString (obj) {\\n                  var result = JSON.stringify(obj, function (key, val) {\\n                    if (typeof val === 'function') {\\n                      return val.toString();\\n                    }\\n                    return val;\\n                  });\\n      \\n                  return result;\\n              };\\n      \\n              window.onresize = function() {\\n                  chart.resize();\\n              };\\n      \\n              function processMessage (e) {\\n                var req = parse(e.data);\\n      \\n                switch(req.types) {\\n                  case \\\"SET_OPTION\\\":\\n                    chart.setOption(req.payload.option, req.payload.notMerge,req.payload.lazyUpate);\\n                    break;\\n                  case \\\"CLEAR\\\":\\n                    chart.clear();\\n                    break;\\n                  case \\\"SET_BACKGROUND_COLOR\\\":\\n                    setBackgroundColor(req.color);\\n                    break;\\n                  case \\\"GET_OPTION\\\":\\n                    var option = chart.getOption();\\n                    var data = {};\\n    \\n                    if(req.properties !== undefined) {\\n                        req.properties.forEach(function (prop) {\\n                          data[prop] = option[prop];\\n                        });\\n                    } else {\\n                        var data = {\\n                            option: option\\n                         };\\n                    }\\n    \\n                    sendCallbackData(req.uuid, data);\\n                    break;\\n                  default:\\n                    break;\\n                }\\n              }\\n      \\n              window.document.addEventListener('message', function(e) {\\n                processMessage(e);\\n              });\\n    \\n              window.addEventListener('message', function(e) {\\n                processMessage(e);\\n              });\\n\\n              \" + props.additionalCode + \"\\n        \";\n};","map":{"version":3,"sources":["C:/Users/Sea-Ic/Desktop/Dr Hanif/React-Native/nex-plex/nexplex/node_modules/react-native-echarts-wrapper/src/jsBuilder.js"],"names":["convertToPostMessageString","obj","JSON","stringify","key","val","Function","toString","undefined","getJavascriptSource","props","OS","Platform","renderer","encodeURI","option","backgroundColor","additionalCode"],"mappings":";AAEA,OAAO,IAAMA,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAAC,GAAG,EAAI;AAC/C,SAAOC,IAAI,CAACC,SAAL,CAAeF,GAAf,EAAoB,UAACG,GAAD,EAAMC,GAAN,EAAc;AACvC,QAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7B,aAAO,IAAIC,QAAJ,CAAa,YAAYD,GAAG,CAACE,QAAJ,EAAzB,CAAP;AACD;;AACD,WAAOF,GAAP;AACD,GALM,CAAP;AAMD,CAPM;AASP,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAAAN,GAAG,EAAI;AAC7B,MAAIA,GAAG,KAAKO,SAAZ,EAAuB,OAAON,IAAI,CAACC,SAAL,CAAe,EAAf,CAAP;AAEvB,SAAOD,IAAI,CAACC,SAAL,CAAeF,GAAf,EAAoB,UAACG,GAAD,EAAMC,GAAN,EAAc;AACvC,QAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7B,aAAOA,GAAG,CAACE,QAAJ,EAAP;AACD;;AACD,WAAOF,GAAP;AACD,GALM,CAAP;AAMD,CATM;AAWP,OAAO,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,KAAK,EAAI;AAAA,MAClCC,EADkC,GAC3BC,QAD2B,CAClCD,EADkC;AAE1C,MAAME,QAAQ,GAAG,QAAjB;AAEA,8GAC8FA,QAD9F,4DAE8CC,SAAS,CAC3CP,QAAQ,CAACG,KAAK,CAACK,MAAP,CADmC,CAFvD,kDAKiCL,KAAK,CAACM,eALvC,knBAoByBL,EApBzB,mwFAmGcD,KAAK,CAACO,cAnGpB;AAqGD,CAzGM","sourcesContent":["import { Platform } from \"react-native\"\n\nexport const convertToPostMessageString = obj => {\n  return JSON.stringify(obj, (key, val) => {\n    if (typeof val === \"function\") {\n      return new Function(\"return \" + val.toString())\n    }\n    return val\n  })\n}\n\nexport const toString = obj => {\n  if (obj === undefined) return JSON.stringify({})\n\n  return JSON.stringify(obj, (key, val) => {\n    if (typeof val === \"function\") {\n      return val.toString()\n    }\n    return val\n  })\n}\n\nexport const getJavascriptSource = props => {\n  const { OS } = Platform\n  const renderer = \"canvas\"\n\n  return `\n             var chart = echarts.init(document.getElementById('main'), undefined, {renderer: '${renderer}'});\n            chart.setOption(parse(decodeURI(\\\"${encodeURI(\n              toString(props.option)\n            )}\\\")));\n             setBackgroundColor(\"${props.backgroundColor}\");\n\n             function setBackgroundColor(color) {\n                document.getElementById('main').style.backgroundColor = color;\n              }\n      \n              function sendData(data) {\n                  window.ReactNativeWebView.postMessage(JSON.stringify({\"types\":\"DATA\",\"payload\": data}));\n              }\n      \n              function sendCallbackData(uuid, data) {\n                  window.ReactNativeWebView.postMessage(JSON.stringify({\"types\":\"CALLBACK\", \"uuid\": uuid, \"payload\": data}));\n              }\n      \n              function getOS() {\n                  return ${OS};\n              }\n      \n              function parse (data) {\n                  return JSON.parse(data, function (key, value) {\n      \n                      if (value\n                          && typeof value === \"string\"\n                          && value.substr(0,8) === \"function\") {\n\n                          var startBody = value.indexOf('{') + 1;\n                          var endBody = value.lastIndexOf('}');\n                          var startArgs = value.indexOf('(') + 1;\n                          var endArgs = value.indexOf(')');\n      \n                          return new Function(value.substring(startArgs, endArgs)\n                                            , value.substring(startBody, endBody));\n                      }\n                      return value;\n                  });\n              }\n      \n              function toString (obj) {\n                  var result = JSON.stringify(obj, function (key, val) {\n                    if (typeof val === 'function') {\n                      return val.toString();\n                    }\n                    return val;\n                  });\n      \n                  return result;\n              };\n      \n              window.onresize = function() {\n                  chart.resize();\n              };\n      \n              function processMessage (e) {\n                var req = parse(e.data);\n      \n                switch(req.types) {\n                  case \"SET_OPTION\":\n                    chart.setOption(req.payload.option, req.payload.notMerge,req.payload.lazyUpate);\n                    break;\n                  case \"CLEAR\":\n                    chart.clear();\n                    break;\n                  case \"SET_BACKGROUND_COLOR\":\n                    setBackgroundColor(req.color);\n                    break;\n                  case \"GET_OPTION\":\n                    var option = chart.getOption();\n                    var data = {};\n    \n                    if(req.properties !== undefined) {\n                        req.properties.forEach(function (prop) {\n                          data[prop] = option[prop];\n                        });\n                    } else {\n                        var data = {\n                            option: option\n                         };\n                    }\n    \n                    sendCallbackData(req.uuid, data);\n                    break;\n                  default:\n                    break;\n                }\n              }\n      \n              window.document.addEventListener('message', function(e) {\n                processMessage(e);\n              });\n    \n              window.addEventListener('message', function(e) {\n                processMessage(e);\n              });\n\n              ${props.additionalCode}\n        `\n}\n"]},"metadata":{},"sourceType":"module"}