{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Sea-Ic\\\\Desktop\\\\Dr Hanif\\\\React-Native\\\\nex-plex\\\\nexplex\\\\node_modules\\\\react-native-echarts-wrapper\\\\src\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from \"prop-types\";\nimport { WebView } from \"react-native-webview\";\nimport { getMinifiedEChartsFramework } from \"./chartconfig\";\nimport * as jsBuilder from \"./jsBuilder\";\n\nvar ECharts = function (_Component) {\n  _inherits(ECharts, _Component);\n\n  var _super = _createSuper(ECharts);\n\n  function ECharts(props) {\n    var _this;\n\n    _classCallCheck(this, ECharts);\n\n    _this = _super.call(this, props);\n\n    _this.onMessage = function (e) {\n      try {\n        if (!e) return null;\n        var onData = _this.props.onData;\n        var data = JSON.parse(unescape(unescape(e.nativeEvent.data)));\n\n        if (data.types === \"DATA\") {\n          onData(data.payload);\n        } else if (data.types === \"CALLBACK\") {\n          var uuid = data.uuid;\n\n          _this.callbacks[uuid](data.payload);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    _this.postMessage = function (data) {\n      _this.webview.postMessage(jsBuilder.convertToPostMessageString(data));\n    };\n\n    _this.ID = function () {\n      return \"_\" + Math.random().toString(36).substr(2, 9);\n    };\n\n    _this.setBackgroundColor = function (color) {\n      var data = {\n        types: \"SET_BACKGROUND_COLOR\",\n        color: color\n      };\n\n      _this.postMessage(data);\n    };\n\n    _this.getOption = function (callback) {\n      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n      var uuid = _this.ID();\n\n      _this.callbacks[uuid] = callback;\n      var data = {\n        types: \"GET_OPTION\",\n        uuid: uuid,\n        properties: properties\n      };\n\n      _this.postMessage(data);\n    };\n\n    _this.setOption = function (option, notMerge, lazyUpdate) {\n      var data = {\n        types: \"SET_OPTION\",\n        payload: {\n          option: option,\n          notMerge: notMerge || false,\n          lazyUpdate: lazyUpdate || false\n        }\n      };\n\n      _this.postMessage(data);\n    };\n\n    _this.clear = function () {\n      var data = {\n        types: \"CLEAR\"\n      };\n\n      _this.postMessage(data);\n    };\n\n    _this.getWebViewRef = function (ref) {\n      _this.webview = ref;\n    };\n\n    _this.onLoadEnd = function () {\n      if (_this.webview) {\n        _this.webview.injectJavaScript(jsBuilder.getJavascriptSource(_this.props));\n      }\n\n      _this.props.onLoadEnd();\n    };\n\n    _this.onGetHeight = null;\n    _this.callbacks = {};\n    _this.html = \"\\n      <!DOCTYPE html>\\n      <html lang=\\\"de\\\">\\n        <head>\\n            <meta http-equiv=\\\"content-type\\\" content=\\\"text/html; charset=utf-8\\\">\\n            <meta name=\\\"viewport\\\" content=\\\"initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no\\\">\\n            <style type=\\\"text/css\\\">\\n                html,body {\\n                height: 100%;\\n                width: 100%;\\n                margin: 0;\\n                padding: 0;\\n                background-color:rgba(0, 0, 0, 0);\\n                }\\n                #main {\\n                height: 100%;\\n                width: 100%;\\n                background-color:rgba(0, 0, 0, 0);\\n                }\\n            </style>\\n            \\n            <script>\\n                \" + getMinifiedEChartsFramework() + \"\\n            </script>\\n        </head>\\n\\n        <body>\\n            <div id=\\\"main\\\">\\n            </div>\\n        </body>\\n\\n      </html>\";\n    return _this;\n  }\n\n  _createClass(ECharts, [{\n    key: \"render\",\n    value: function render() {\n      var source = {};\n\n      if (this.props.customTemplatePath) {\n        source = {\n          uri: this.props.customTemplatePath\n        };\n      } else {\n        source = {\n          html: this.html,\n          baseUrl: \"\"\n        };\n      }\n\n      return React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 7\n        }\n      }, React.createElement(WebView, {\n        ref: this.getWebViewRef,\n        originWhitelist: [\"*\"],\n        scrollEnabled: false,\n        source: source,\n        onMessage: this.onMessage,\n        allowFileAccess: true,\n        allowUniversalAccessFromFileURLs: true,\n        mixedContentMode: \"always\",\n        onLoadEnd: this.onLoadEnd,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return ECharts;\n}(Component);\n\nECharts.propTypes = {\n  onData: PropTypes.func,\n  legacyMode: PropTypes.bool,\n  canvas: PropTypes.bool,\n  onLoadEnd: PropTypes.func,\n  backgroundColor: PropTypes.string,\n  customTemplatePath: PropTypes.string\n};\nECharts.defaultProps = {\n  onData: function onData() {},\n  legacyMode: false,\n  canvas: false,\n  onLoadEnd: function onLoadEnd() {},\n  backgroundColor: \"rgba(0, 0, 0, 0)\"\n};\nexport { ECharts };","map":{"version":3,"sources":["C:/Users/Sea-Ic/Desktop/Dr Hanif/React-Native/nex-plex/nexplex/node_modules/react-native-echarts-wrapper/src/index.js"],"names":["React","Component","PropTypes","WebView","getMinifiedEChartsFramework","jsBuilder","ECharts","props","onMessage","e","onData","data","JSON","parse","unescape","nativeEvent","types","payload","uuid","callbacks","error","console","log","postMessage","webview","convertToPostMessageString","ID","Math","random","toString","substr","setBackgroundColor","color","getOption","callback","properties","undefined","setOption","option","notMerge","lazyUpdate","clear","getWebViewRef","ref","onLoadEnd","injectJavaScript","getJavascriptSource","onGetHeight","html","source","customTemplatePath","uri","baseUrl","flex","propTypes","func","legacyMode","bool","canvas","backgroundColor","string","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { View } from \"react-native\";\nimport PropTypes from \"prop-types\";\nimport { WebView } from \"react-native-webview\";\n\nimport { getMinifiedEChartsFramework } from \"./chartconfig\";\nimport * as jsBuilder from \"./jsBuilder\";\n\nclass ECharts extends Component {\n  static propTypes = {\n    onData: PropTypes.func,\n    legacyMode: PropTypes.bool,\n    canvas: PropTypes.bool,\n    onLoadEnd: PropTypes.func,\n    backgroundColor: PropTypes.string,\n    customTemplatePath: PropTypes.string\n  };\n\n  static defaultProps = {\n    onData: () => {},\n    legacyMode: false,\n    canvas: false,\n    onLoadEnd: () => {},\n    backgroundColor: \"rgba(0, 0, 0, 0)\"\n  };\n\n  constructor(props) {\n    super(props);\n    this.onGetHeight = null;\n    this.callbacks = {};\n\n    this.html = `\n      <!DOCTYPE html>\n      <html lang=\"de\">\n        <head>\n            <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n            <meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no\">\n            <style type=\"text/css\">\n                html,body {\n                height: 100%;\n                width: 100%;\n                margin: 0;\n                padding: 0;\n                background-color:rgba(0, 0, 0, 0);\n                }\n                #main {\n                height: 100%;\n                width: 100%;\n                background-color:rgba(0, 0, 0, 0);\n                }\n            </style>\n            \n            <script>\n                ${getMinifiedEChartsFramework()}\n            </script>\n        </head>\n\n        <body>\n            <div id=\"main\">\n            </div>\n        </body>\n\n      </html>`;\n  }\n\n  onMessage = e => {\n    try {\n      if (!e) return null;\n\n      const { onData } = this.props;\n\n      const data = JSON.parse(unescape(unescape(e.nativeEvent.data)));\n\n      if (data.types === \"DATA\") {\n        onData(data.payload);\n      } else if (data.types === \"CALLBACK\") {\n        /* eslint-disable no-case-declarations */\n        const { uuid } = data;\n        /* eslint-enable no-case-declarations */\n        this.callbacks[uuid](data.payload);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  postMessage = data => {\n    this.webview.postMessage(jsBuilder.convertToPostMessageString(data));\n  };\n\n  ID = () =>\n    `_${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n\n  setBackgroundColor = color => {\n    const data = {\n      types: \"SET_BACKGROUND_COLOR\",\n      color\n    };\n    this.postMessage(data);\n  };\n\n  getOption = (callback, properties = undefined) => {\n    const uuid = this.ID();\n    this.callbacks[uuid] = callback;\n    const data = {\n      types: \"GET_OPTION\",\n      uuid,\n      properties\n    };\n    this.postMessage(data);\n  };\n\n  setOption = (option, notMerge, lazyUpdate) => {\n    const data = {\n      types: \"SET_OPTION\",\n      payload: {\n        option,\n        notMerge: notMerge || false,\n        lazyUpdate: lazyUpdate || false\n      }\n    };\n    this.postMessage(data);\n  };\n\n  clear = () => {\n    const data = {\n      types: \"CLEAR\"\n    };\n    this.postMessage(data);\n  };\n\n  getWebViewRef = ref => {\n    this.webview = ref;\n  };\n\n  onLoadEnd = () => {\n    if (this.webview) {\n      this.webview.injectJavaScript(jsBuilder.getJavascriptSource(this.props));\n    }\n    this.props.onLoadEnd();\n  };\n\n  render() {\n    let source = {};\n\n    if (this.props.customTemplatePath) {\n      source = {\n        uri: this.props.customTemplatePath\n      };\n    } else {\n      source = {\n        html: this.html,\n        baseUrl: \"\"\n      };\n    }\n\n    return (\n      <View style={{ flex: 1 }}>\n        <WebView\n          ref={this.getWebViewRef}\n          originWhitelist={[\"*\"]}\n          scrollEnabled={false}\n          source={source}\n          onMessage={this.onMessage}\n          allowFileAccess\n          allowUniversalAccessFromFileURLs\n          mixedContentMode=\"always\"\n          onLoadEnd={this.onLoadEnd}\n        />\n      </View>\n    );\n  }\n}\n\nexport { ECharts };\n"]},"metadata":{},"sourceType":"module"}